// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PortalBuilder.DataLayer.Context;

namespace PortalBuilder.DataLayer.Migrations
{
    [DbContext(typeof(ShahrContext))]
    [Migration("20210821051646_mig_Portal")]
    partial class mig_Portal
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PortalBuilder.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArticleCategoryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<string>("Detail");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsFeatured");

                    b.Property<bool>("IsSecondLanguage");

                    b.Property<string>("Keywords");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("Photo");

                    b.Property<DateTime?>("PublishAt");

                    b.Property<bool>("SendAsNewsLetter");

                    b.Property<string>("Title");

                    b.Property<int>("ViewCount");

                    b.Property<string>("Writer");

                    b.HasKey("Id");

                    b.HasIndex("ArticleCategoryId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("PortalBuilder.Models.ArticleCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsFeatured");

                    b.Property<bool>("IsSecondLanguage");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<int?>("ParentId");

                    b.Property<int>("SortIndex");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("ArticleCategories");
                });

            modelBuilder.Entity("PortalBuilder.Models.Bank", b =>
                {
                    b.Property<int>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BankDepositRequestId");

                    b.Property<string>("EnTitle");

                    b.Property<string>("Logo");

                    b.Property<string>("Title");

                    b.HasKey("BankId");

                    b.HasIndex("BankDepositRequestId");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("PortalBuilder.Models.BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber");

                    b.Property<string>("AccountOwner");

                    b.Property<int>("BankId");

                    b.Property<string>("BranchTitle");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSecondLanguage");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("SendRequestsToEmails");

                    b.Property<string>("ShebaNumber");

                    b.Property<int>("SortIndex");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("PortalBuilder.Models.BankDepositRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("BankAccountId");

                    b.Property<int>("BankId");

                    b.Property<string>("BranchTitle");

                    b.Property<string>("Cellphone");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime>("DepositedAt");

                    b.Property<string>("DepositorName");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsValid");

                    b.Property<string>("NationalCode");

                    b.Property<string>("ReceiptCode");

                    b.Property<string>("TrackingCode");

                    b.Property<DateTime?>("ValidatedAt");

                    b.Property<int?>("ValidatedBy");

                    b.Property<string>("ValidationNote");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.ToTable("BankDepositRequests");
                });

            modelBuilder.Entity("PortalBuilder.Models.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClickCount");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSecondLanguage");

                    b.Property<bool>("IsWide");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("Link");

                    b.Property<string>("Photo");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("PortalBuilder.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<bool>("DisplayInContactPage");

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSecondLanguage");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<double>("Latitude");

                    b.Property<string>("Link");

                    b.Property<double>("Longitude");

                    b.Property<string>("ManagerName");

                    b.Property<string>("Phone");

                    b.Property<string>("Photo");

                    b.Property<string>("PostalCode");

                    b.Property<int>("ProvinceId");

                    b.Property<string>("Title");

                    b.Property<string>("WorkTimes");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("PortalBuilder.Models.BrandTimeline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<DateTime>("HappenedAt");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSecondLanguage");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("Link");

                    b.Property<string>("Photo");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("BrandTimelines");
                });

            modelBuilder.Entity("PortalBuilder.Models.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSecondLanguage");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("Link");

                    b.Property<string>("Photo");

                    b.Property<int>("SortIndex");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("PortalBuilder.Models.ContactMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<int?>("CateogryId");

                    b.Property<string>("Cellphone");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<string>("NationalCode");

                    b.Property<string>("ReviewNote");

                    b.Property<DateTime?>("ReviewedAt");

                    b.Property<int?>("ReviewedBy");

                    b.Property<string>("SenderFirstName");

                    b.Property<string>("SenderLastName");

                    b.Property<string>("Title");

                    b.Property<string>("TrackingCode");

                    b.HasKey("Id");

                    b.HasIndex("CateogryId");

                    b.ToTable("ContactMessages");
                });

            modelBuilder.Entity("PortalBuilder.Models.ContactMessageCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSecondLanguage");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("SendRequestsToEmails");

                    b.Property<int>("SortIndex");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("ContactMessageCategories");
                });

            modelBuilder.Entity("PortalBuilder.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<DateTime?>("Birthdate");

                    b.Property<string>("BourseExchangeCode");

                    b.Property<string>("Cellphone");

                    b.Property<string>("City");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<string>("EducationField");

                    b.Property<int?>("EducationLevelId");

                    b.Property<string>("Email");

                    b.Property<string>("EncryptedPassword");

                    b.Property<string>("FatherName");

                    b.Property<DateTime?>("FirstLoginAt");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("JobTitle");

                    b.Property<string>("LastIP");

                    b.Property<DateTime?>("LastLoginAt");

                    b.Property<DateTime?>("LastLoginAttemptAt");

                    b.Property<int>("LastLoginAttemptsCount");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("LastName");

                    b.Property<DateTime?>("LastPasswordChangedAt");

                    b.Property<string>("NationalCode");

                    b.Property<string>("Phone");

                    b.Property<string>("PostalCode");

                    b.Property<int?>("ProvinceId");

                    b.Property<string>("ReferrerCode");

                    b.Property<string>("Salt");

                    b.Property<string>("TrackingCode");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("EducationLevelId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("PortalBuilder.Models.EducationLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnTitle");

                    b.Property<int>("SortIndex");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("EducationLevels");
                });

            modelBuilder.Entity("PortalBuilder.Models.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CorrectAnswerPoint");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<int>("DurationInMinute");

                    b.Property<DateTime?>("ExpireAt");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSecondLanguage");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<DateTime?>("PublishAt");

                    b.Property<int?>("QuestionsCount");

                    b.Property<string>("Title");

                    b.Property<bool>("UseRandomQuestions");

                    b.Property<int>("WrongAnswerNegativePoint");

                    b.HasKey("Id");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("PortalBuilder.Models.ExamInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AnsweredAt");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<int>("ExamId");

                    b.Property<string>("QAs");

                    b.Property<int>("Score");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.ToTable("ExamInstances");
                });

            modelBuilder.Entity("PortalBuilder.Models.ExamQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CorrectAnswer");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<int>("ExamId");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("OptionA");

                    b.Property<string>("OptionB");

                    b.Property<string>("OptionC");

                    b.Property<string>("Photo");

                    b.Property<string>("Question");

                    b.Property<int>("SortIndex");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.ToTable("ExamQuestions");
                });

            modelBuilder.Entity("PortalBuilder.Models.FAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer");

                    b.Property<int>("CategoryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("Link");

                    b.Property<string>("Photo");

                    b.Property<string>("Question");

                    b.Property<int>("SortIndex");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Faqs");
                });

            modelBuilder.Entity("PortalBuilder.Models.FAQCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSecondLanguage");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<int>("SortIndex");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("FaqCategories");
                });

            modelBuilder.Entity("PortalBuilder.Models.JobAd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<string>("Detail");

                    b.Property<bool>("FemaleIsAccepted");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsFulltime");

                    b.Property<bool>("IsInternship");

                    b.Property<bool>("IsOutsource");

                    b.Property<bool>("IsPartTime");

                    b.Property<bool>("IsSecondLanguage");

                    b.Property<string>("Keywords");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<bool>("MaleIsAccepted");

                    b.Property<int?>("MinEducationLevelId");

                    b.Property<int?>("ProvinceId");

                    b.Property<DateTime?>("PublishAt");

                    b.Property<string>("SendRequestsToEmails");

                    b.Property<string>("Title");

                    b.Property<int>("ViewCount");

                    b.HasKey("Id");

                    b.HasIndex("MinEducationLevelId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("JobAds");
                });

            modelBuilder.Entity("PortalBuilder.Models.JobAdRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("InterviewDate");

                    b.Property<string>("InterviewInviteMessage");

                    b.Property<bool?>("IsAccpeted");

                    b.Property<int>("JobAdId");

                    b.Property<DateTime?>("ValidatedAt");

                    b.Property<int?>("ValidatedBy");

                    b.Property<string>("ValidationNote");

                    b.HasKey("Id");

                    b.HasIndex("JobAdId");

                    b.ToTable("JobAdRequests");
                });

            modelBuilder.Entity("PortalBuilder.Models.LandingPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundPhoto");

                    b.Property<int>("ClickCount");

                    b.Property<string>("CountdownMessage");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<string>("Detail");

                    b.Property<DateTime?>("EndAt");

                    b.Property<string>("EndingLink");

                    b.Property<string>("EndingLinkTitle");

                    b.Property<string>("EndingMessage");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSecondLanguage");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("Link");

                    b.Property<string>("LinkTitle");

                    b.Property<string>("Photo");

                    b.Property<string>("RouteTitle");

                    b.Property<bool>("ShowCountdownBeforeStart");

                    b.Property<bool>("ShowCountdownToEnd");

                    b.Property<DateTime?>("StartAt");

                    b.Property<string>("Title");

                    b.Property<bool>("UseDarkTheme");

                    b.HasKey("Id");

                    b.ToTable("LandingPages");
                });

            modelBuilder.Entity("PortalBuilder.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<bool>("DisplayInFooterMenu");

                    b.Property<bool>("DisplayInMainMenu");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSecondLanguage");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("Link");

                    b.Property<int?>("ParentId");

                    b.Property<int>("SortIndex");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("PortalBuilder.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClickCount");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<string>("Detail");

                    b.Property<bool>("DisplayAsPopUp");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSecondLanguage");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("Link");

                    b.Property<string>("LinkTitle");

                    b.Property<string>("Photo");

                    b.Property<DateTime?>("PublishAt");

                    b.Property<bool>("SendAsNewsLetter");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("PortalBuilder.Models.Operator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cellphone");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Email");

                    b.Property<string>("EncryptedPassword");

                    b.Property<DateTime?>("FirstLoginAt");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastIP");

                    b.Property<DateTime?>("LastLoginAt");

                    b.Property<DateTime?>("LastLoginAttemptAt");

                    b.Property<int>("LastLoginAttemptsCount");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("LastName");

                    b.Property<DateTime?>("LastPasswordChangedAt");

                    b.Property<string>("Photo");

                    b.Property<int>("RoleId");

                    b.Property<string>("Salt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Operators");
                });

            modelBuilder.Entity("PortalBuilder.Models.OperatorRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<int>("SortIndex");

                    b.Property<string>("SystemName");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("OperatorRoles");
                });

            modelBuilder.Entity("PortalBuilder.Models.OrganizationUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSecondLanguage");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<int>("SortIndex");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("OrganizationUnits");
                });

            modelBuilder.Entity("PortalBuilder.Models.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<string>("Detail");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSecondLanguage");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<DateTime?>("PublishAt");

                    b.Property<string>("RouteTitle");

                    b.Property<string>("Title");

                    b.Property<int>("ViewCount");

                    b.HasKey("Id");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("PortalBuilder.Models.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsFeatured");

                    b.Property<bool>("IsSecondLanguage");

                    b.Property<bool>("IsTestimonial");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("Link");

                    b.Property<string>("Photo");

                    b.Property<int>("SortIndex");

                    b.Property<string>("Subtitle");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("PortalBuilder.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<int?>("GalleryId");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("Photographer");

                    b.Property<int>("SortIndex");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("GalleryId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("PortalBuilder.Models.PhotoGallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSecondLanguage");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("Photo");

                    b.Property<int>("SortIndex");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("PhotoGalleries");
                });

            modelBuilder.Entity("PortalBuilder.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<string>("Detail");

                    b.Property<string>("DownloadLink");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsFeatured");

                    b.Property<bool>("IsSecondLanguage");

                    b.Property<bool>("IsService");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("Link");

                    b.Property<string>("Photo");

                    b.Property<DateTime?>("PublishAt");

                    b.Property<string>("RouteTitle");

                    b.Property<int>("SortIndex");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("PortalBuilder.Models.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnTitle");

                    b.Property<int>("SortIndex");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("PortalBuilder.Models.Questionnaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ExpireAt");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSecondLanguage");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<DateTime?>("PublishAt");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Questionnaires");
                });

            modelBuilder.Entity("PortalBuilder.Models.QuestionnaireInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AnsweredAt");

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("QAs");

                    b.Property<int>("QuestionnaireId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireId");

                    b.ToTable("QuestionnaireInstances");
                });

            modelBuilder.Entity("PortalBuilder.Models.QuestionnaireQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("OptionA");

                    b.Property<int>("OptionACount");

                    b.Property<string>("OptionB");

                    b.Property<int>("OptionBCount");

                    b.Property<string>("OptionC");

                    b.Property<int>("OptionCCount");

                    b.Property<string>("OptionD");

                    b.Property<int>("OptionDCount");

                    b.Property<string>("OptionE");

                    b.Property<int>("OptionECount");

                    b.Property<string>("OptionF");

                    b.Property<int>("OptionFCount");

                    b.Property<string>("Photo");

                    b.Property<string>("Question");

                    b.Property<int>("QuestionnaireId");

                    b.Property<int>("SortIndex");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireId");

                    b.ToTable("QuestionnaireQuestions");
                });

            modelBuilder.Entity("PortalBuilder.Models.SiteSetting", b =>
                {
                    b.Property<string>("BrandName")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActiveTheme");

                    b.Property<string>("AdminAllowedIPs");

                    b.Property<bool>("AllowCustomerRegisteration");

                    b.Property<bool>("AllowSecondLanguage");

                    b.Property<string>("BrandDescription");

                    b.Property<string>("BrandMission");

                    b.Property<string>("BrandSlogan");

                    b.Property<string>("BrandVision");

                    b.Property<string>("FavIcon");

                    b.Property<string>("HomePageMode");

                    b.Property<string>("LogoPhoto");

                    b.Property<string>("PrimaryColor");

                    b.Property<bool>("RedirectToUrl");

                    b.Property<string>("RedirectUrl");

                    b.Property<string>("SecondaryColor");

                    b.HasKey("BrandName");

                    b.ToTable("SiteSettings");
                });

            modelBuilder.Entity("PortalBuilder.Models.Slide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClickCount");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSecondLanguage");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("Link");

                    b.Property<string>("LinkTitle");

                    b.Property<string>("Photo");

                    b.Property<int>("SortIndex");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Slides");
                });

            modelBuilder.Entity("PortalBuilder.Models.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<string>("Education");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSecondLanguage");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("LastName");

                    b.Property<int>("OrganizationUnitId");

                    b.Property<string>("Phone");

                    b.Property<string>("Photo");

                    b.Property<int>("SortIndex");

                    b.Property<int>("StaffPositionId");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("OrganizationUnitId");

                    b.HasIndex("StaffPositionId");

                    b.ToTable("Staves");
                });

            modelBuilder.Entity("PortalBuilder.Models.StaffPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSecondLanguage");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<int>("SortIndex");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("StaffPositions");
                });

            modelBuilder.Entity("PortalBuilder.Models.Article", b =>
                {
                    b.HasOne("PortalBuilder.Models.ArticleCategory", "ArticleCategory")
                        .WithMany()
                        .HasForeignKey("ArticleCategoryId");
                });

            modelBuilder.Entity("PortalBuilder.Models.ArticleCategory", b =>
                {
                    b.HasOne("PortalBuilder.Models.ArticleCategory", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("PortalBuilder.Models.Bank", b =>
                {
                    b.HasOne("PortalBuilder.Models.BankDepositRequest", "BankDepositRequest")
                        .WithMany("Banks")
                        .HasForeignKey("BankDepositRequestId");
                });

            modelBuilder.Entity("PortalBuilder.Models.BankAccount", b =>
                {
                    b.HasOne("PortalBuilder.Models.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortalBuilder.Models.BankDepositRequest", b =>
                {
                    b.HasOne("PortalBuilder.Models.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortalBuilder.Models.Branch", b =>
                {
                    b.HasOne("PortalBuilder.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortalBuilder.Models.ContactMessage", b =>
                {
                    b.HasOne("PortalBuilder.Models.ContactMessageCategory", "Cateogry")
                        .WithMany()
                        .HasForeignKey("CateogryId");
                });

            modelBuilder.Entity("PortalBuilder.Models.Customer", b =>
                {
                    b.HasOne("PortalBuilder.Models.EducationLevel", "EducationLevel")
                        .WithMany()
                        .HasForeignKey("EducationLevelId");

                    b.HasOne("PortalBuilder.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");
                });

            modelBuilder.Entity("PortalBuilder.Models.ExamInstance", b =>
                {
                    b.HasOne("PortalBuilder.Models.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortalBuilder.Models.ExamQuestion", b =>
                {
                    b.HasOne("PortalBuilder.Models.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortalBuilder.Models.FAQ", b =>
                {
                    b.HasOne("PortalBuilder.Models.FAQCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortalBuilder.Models.JobAd", b =>
                {
                    b.HasOne("PortalBuilder.Models.EducationLevel", "MinEducationLevel")
                        .WithMany()
                        .HasForeignKey("MinEducationLevelId");

                    b.HasOne("PortalBuilder.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");
                });

            modelBuilder.Entity("PortalBuilder.Models.JobAdRequest", b =>
                {
                    b.HasOne("PortalBuilder.Models.JobAd", "JobAd")
                        .WithMany()
                        .HasForeignKey("JobAdId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortalBuilder.Models.Menu", b =>
                {
                    b.HasOne("PortalBuilder.Models.Menu", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("PortalBuilder.Models.Operator", b =>
                {
                    b.HasOne("PortalBuilder.Models.OperatorRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortalBuilder.Models.Photo", b =>
                {
                    b.HasOne("PortalBuilder.Models.PhotoGallery", "Gallery")
                        .WithMany()
                        .HasForeignKey("GalleryId");
                });

            modelBuilder.Entity("PortalBuilder.Models.QuestionnaireInstance", b =>
                {
                    b.HasOne("PortalBuilder.Models.Questionnaire", "Questionnaire")
                        .WithMany()
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortalBuilder.Models.QuestionnaireQuestion", b =>
                {
                    b.HasOne("PortalBuilder.Models.Questionnaire", "Questionnaire")
                        .WithMany()
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortalBuilder.Models.Staff", b =>
                {
                    b.HasOne("PortalBuilder.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PortalBuilder.Models.OrganizationUnit", "OrganizationUnit")
                        .WithMany()
                        .HasForeignKey("OrganizationUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PortalBuilder.Models.StaffPosition", "StaffPosition")
                        .WithMany()
                        .HasForeignKey("StaffPositionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
